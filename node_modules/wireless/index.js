var util = require('util');
var events = require('events');
var _ = require('underscore');
var exec = require('child_process').exec;

// gonna require some sys or child_process stuff for executing nix commands
var Wireless = function() {
    events.EventEmitter.call(this);
    var self = this;

    self.networks = [];
    self.scanner = null;
    self.killing = false;

    // Configuration settings
    self.configuration = {
        // Interface to listen on (should one day handle multiple)
        iface: 'wlan0',
        // How often to poll the listing of networks
        updateFrequency: 10,
        // How many seconds should an AP be gone before we consider it disappeared
        disappearThreshold: 30,
        // What commands to execute
        commands: {
            scan: 'iwlist :INTERFACE',
            stat: 'iwconfig :INTERFACE',
        },
        realCommands: {
            scan: 'iwlist wlan0',
            stat: 'iwconfig wlan0',
        }
    };

    // Bind us some event listeners!
    //on: function(event, callback) {
        // Events: join/connect, leave/disconnect, change, appear, disappear, scan-complete, scan-start, cracked?
    //},

    // Set the configuration settings
    self.configure = function(config) {
        // should actually be a merge
        _.extend(self.configuration, config);

        self.configuration.realCommands = {
            scan: self.configuration.commands.scan.replace(':INTERFACE', self.configuration.iface),
            stat: self.configuration.commands.stat.replace(':INTERFACE', self.configuration.iface),
        };
    };

    // Start listening
    self.start = function(callback) {
        self._executeScan();
        self.scanner = setInterval(self._executeScan, self.configuration.updateFrequency * 1000);
    };

    self._seeNetwork = function(network) {
        if (self.networks[network.address]) {
            var oldNetwork = self.networks[network.address]
            if (oldNetwork.ssid != network.ssid || oldNetwork.encryption != network.encryption) {
                self.emit('change', false, network);
                self.networks[network.address] = network;
            }
        } else {
            self.networks[network.address] = network;
            self.emit('appear', false, network);
        }
    };

    // Stop listening
    self.stop = function(callback) {
        self.killing = true;
        clearInterval(self.scanner);
        self.emit('stop', false);
        if (callback) {
            callback();
        }
    };

    // Returns a listing of networks from the last scan
    // Doesn't need a callback, just getting the last list, not doing a new scan
    self.list = function() {
        return self.networks;
    };

    // Attempts to connect to the specified network
    self.join = function(ssid, credentials, callback) {

    };

    // Attempts to disconnect from the specified network
    self.leave = function(callback) {

    };

    // Parses the output from `iwlist IFACE scan` and returns a pretty formattted object
    self.parse = function(scanResults) {
        var lines = scanResults.split(/\r\n|\r|\n/);
        var networks = [];
        var network = {};
        var currentTime = new Date();
        _.each(lines, function(line) {
            var line = line.replace(/^\s+|\s+$/g,"");
            // a "Cell" line means that we've found a start of a new network
            if (line.indexOf('Cell') === 0) {
                if (!_.isEmpty(network)) {
                    networks.push(network);
                }
                network = {
                    //speeds: []
                    last_seen: currentTime,
                };
                network.address = line.match(/([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}/)[0];
            } else if (line.indexOf('Channel') === 0) {
                network.channel = line.match(/Channel:([0-9]{1,2})/)[1];
            } else if (line.indexOf('Quality') === 0) {
                network.quality = line.match(/Quality=([0-9]{1,2})\/70/)[1];
            } else if (line.indexOf('Encryption key') === 0) {
                var enc = line.match(/Encryption key:(on|off)/)[1];
                network.encryption = (enc === 'on');
            } else if (line.indexOf('ESSID') === 0) {
                network.ssid = line.match(/ESSID:"(.*)"/)[1];
            } else if (line.indexOf('Mode') === 0) {
                network.mode = line.match(/Mode:(.*)/)[1];
            }
            //else {
                //_.each(line.match(/([0-9]{1,2}|[0-9]{1,2}.[0-9]{1,2}) Mb\/s/g), function(speed) {
                    //console.log(speed);
                    //console.log(parseInt(speed));
                    //network.speeds.push(parseInt(speed), 10);
                //});
            //}
        });
        networks.push(network);

        return networks;
    };

    // Executes a scan, reporting each network we see
    self._executeScan = function() {
        // Make this a non annonymous function, run immediately, then run interval which runs function
        exec(self.configuration.realCommands.scan, function(err, stdout, stderr) {
            if (err) {
                if (self.killing) {
                    // Of course we got an error the main app is being killed, taking iwlist down with it
                    return;
                }
                console.log("[   ERROR] Got some major errors from our scan command:", err);
                throw err;
            }

            if (stderr) {
                if (stderr.match(/Device or resource busy/)) {
                    console.log("[ WARNING] Scans are overlapping; slow down update frequency");
                    return;
                } else if (stderr.match(/Allocation failed/)) {
                    console.log("[ WARNING] Too many networks for iwlist to handle");
                    return;
                } else {
                    console.log("[ WARNING] Got some errors from our scan command:", stderr);
                }
            }

            if (!stdout) {
                return;
            }

            var content = stdout.toString();
            var networks = self.parse(content);
            _.each(networks, function(network) {
                self._seeNetwork(network);
            });
        });
    };
};

util.inherits(Wireless, events.EventEmitter);
module.exports = new Wireless();
